"use strict";
/**
 * Schemats takes sql database schema and creates corresponding typescript definitions
 * Created by xiamx on 2016-08-10.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("./typescript");
var schema_1 = require("./schema");
var options_1 = require("./options");
exports.Options = options_1.default;
var typescript_formatter_1 = require("typescript-formatter");
var pkgVersion = require('../package.json').version;
function getTime() {
    var padTime = function (value) { return ("0" + value).slice(-2); };
    var time = new Date();
    var yyyy = time.getFullYear();
    var MM = padTime(time.getMonth() + 1);
    var dd = padTime(time.getDate());
    var hh = padTime(time.getHours());
    var mm = padTime(time.getMinutes());
    var ss = padTime(time.getSeconds());
    return yyyy + "-" + MM + "-" + dd + " " + hh + ":" + mm + ":" + ss;
}
function buildHeader(db, tables, schema, options) {
    var commands = ['schemats', 'generate', '-c', db.connectionString.replace(/:\/\/.*@/, '://username:password@')];
    if (options.camelCase)
        commands.push('-C');
    if (tables.length > 0) {
        tables.forEach(function (t) {
            commands.push('-t', t);
        });
    }
    if (schema) {
        commands.push('-s', schema);
    }
    return "\n        /**\n         * AUTO-GENERATED FILE @ " + getTime() + " - DO NOT EDIT!\n         *\n         * This file was automatically generated by schemats v." + pkgVersion + "\n         * $ " + commands.join(' ') + "\n         *\n         */\n\n    ";
}
function typescriptOfTable(db, table, schema, options) {
    if (options === void 0) { options = new options_1.default(); }
    return __awaiter(this, void 0, void 0, function () {
        var interfaces, tableTypes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (typeof db === 'string') {
                        db = schema_1.getDatabase(db);
                    }
                    interfaces = '';
                    return [4 /*yield*/, db.getTableTypes(table, schema, options)];
                case 1:
                    tableTypes = _a.sent();
                    interfaces += typescript_1.generateTableTypes(table, tableTypes, options);
                    interfaces += typescript_1.generateTableInterface(table, tableTypes, options);
                    return [2 /*return*/, interfaces];
            }
        });
    });
}
exports.typescriptOfTable = typescriptOfTable;
function typescriptOfSchema(db, tables, schema, options) {
    if (tables === void 0) { tables = []; }
    if (schema === void 0) { schema = null; }
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var optionsObject, enumTypes, _a, interfacePromises, interfaces, output, formatterOption, processedResult;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (typeof db === 'string') {
                        db = schema_1.getDatabase(db);
                    }
                    if (!schema) {
                        schema = db.getDefaultSchema();
                    }
                    if (!(tables.length === 0)) return [3 /*break*/, 2];
                    return [4 /*yield*/, db.getSchemaTables(schema)];
                case 1:
                    tables = _b.sent();
                    _b.label = 2;
                case 2:
                    optionsObject = new options_1.default(options);
                    _a = typescript_1.generateEnumType;
                    return [4 /*yield*/, db.getEnumTypes(schema)];
                case 3:
                    enumTypes = _a.apply(void 0, [_b.sent(), optionsObject]);
                    interfacePromises = tables.map(function (table) { return typescriptOfTable(db, table, schema, optionsObject); });
                    return [4 /*yield*/, Promise.all(interfacePromises)
                            .then(function (tsOfTable) { return tsOfTable.join(''); })];
                case 4:
                    interfaces = _b.sent();
                    output = '/* tslint:disable */\n\n';
                    if (optionsObject.options.writeHeader) {
                        output += buildHeader(db, tables, schema, options);
                    }
                    output += enumTypes;
                    output += interfaces;
                    formatterOption = {
                        replace: false,
                        verify: false,
                        tsconfig: true,
                        tslint: true,
                        editorconfig: true,
                        tsfmt: true,
                        vscode: false,
                        tsconfigFile: null,
                        tslintFile: null,
                        vscodeFile: null,
                        tsfmtFile: null
                    };
                    return [4 /*yield*/, typescript_formatter_1.processString('schema.ts', output, formatterOption)];
                case 5:
                    processedResult = _b.sent();
                    return [2 /*return*/, processedResult.dest];
            }
        });
    });
}
exports.typescriptOfSchema = typescriptOfSchema;
var schema_2 = require("./schema");
exports.getDatabase = schema_2.getDatabase;
//# sourceMappingURL=index.js.map